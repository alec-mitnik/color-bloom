*, *::before, *::after {
  box-sizing: border-box;
  flex: 0 0 auto;
  min-width: 0;
  min-height: 0;
}

:root {
  --toolbar-pointer-events: all;
  --selected-fill-color: black;
  --canvas-width: 1920px;
  --canvas-height: 1200px;
  --canvas-scale: 0.5;
  --canvas-offset-x: 0px;
  --canvas-offset-y: 50px;
  --mouse-x: -1000px;
  --mouse-y: -1000px;
  accent-color: var(--selected-fill-color);
  font-family: "Port Lligat Sans", sans-serif;
  font-size: 100%;

  @media (width < 500px) {
    font-size: 75%;
  }
}

html, body, main {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

body {
  --base-dimension: 512px;
  background: #313437 url('./images/dark_wood.png');
  background-size: calc(var(--base-dimension) * 2 * var(--canvas-scale)) auto;
  background-position: center;
}

p, ul {
  margin: 0;
}

kbd {
  background-color: #eee;
  border-radius: 3px;
  border: 1px solid #b4b4b4;
  box-shadow:
    0 1px 1px rgba(0, 0, 0, 0.2),
    0 2px 0 0 rgba(255, 255, 255, 0.7) inset;
  color: #333;
  display: inline-block;
  font-weight: 700;
  line-height: 1;
  padding: 2px 4px;
  white-space: nowrap;
  text-transform: capitalize;

  &.control-key::before {
    content: '⌃' / '';
  }

  &.shift-key::before {
    content: '⇧' / '';
  }

  &.alt-key::before {
    content: '⌥' / '';
  }

  &.meta-key::before {
    content: '⌘' / '';
  }

  &.control-key, &.shift-key, &.alt-key, &.meta-key {
    position: relative;

    > span {
      position: absolute;
      opacity: 0;
      width: 0;
      height: 0;
      z-index: -1;
      pointer-events: none;
      overflow: hidden;
    }
  }
}

.sr-only {
  position: absolute;
  opacity: 0;
  width: 0;
  height: 0;
  z-index: -1;
  pointer-events: none;
  overflow: hidden;
  white-space: nowrap;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

button, label, input:not([type="range"]) {
  /* Easy CSS reset */
  all: unset;

  /* The following all need to be applied to the exact same selector
  after `all: unset` in order to not get overridden */

  outline: revert;

  /* Prevent long-press magnifier on mobile */
  -webkit-touch-callout: none;

  /* Prevent text selection */
  -webkit-user-select: none;
  user-select: none;
}

button {
  color: inherit;
  font-family: inherit;
}

button:not(:disabled), a {
  cursor: pointer;
}

body, main, #contentWrapper {
  display: flex;
  justify-content: center;
  align-items: center;
}

.row {
  display: flex;
}

.column {
  display: flex;
  flex-direction: column;
}

.gap-small {
  gap: 8px;
}

#contentWrapper {
  position: relative;
  touch-action: none;
  min-width: 100%;
  min-height: 100%;

  &.positioning {
    cursor: grabbing;
  }

  .guide {
    position: absolute;
    background: #ddd;

    @media not (prefers-contrast: more) {
      opacity: 0.3;
    }

    &.vertical {
      transform: translateX(calc(var(--canvas-offset-x) * var(--canvas-scale)));
      top: 0;
      bottom: 0;
      width: 2px;
    }

    &.horizontal {
      transform: translateY(calc(var(--canvas-offset-y) * var(--canvas-scale)));
      left: 0;
      right: 0;
      height: 2px;
    }

    &.cursor {
      @media not ((hover: hover) and (pointer: fine)) {
        display: none;
      }

      background-color: #9999ff;
      top: -1px;
      left: -1px;

      &.vertical {
        transform: translateX(var(--mouse-x));
      }

      &.horizontal {
        transform: translateY(var(--mouse-y));
      }
    }
  }
}

#canvasWrapper {
  position: relative;
  width: calc(var(--canvas-width) * var(--canvas-scale));
  height: calc(var(--canvas-height) * var(--canvas-scale));
  transform: translate(calc(var(--canvas-offset-x) * var(--canvas-scale)), calc(var(--canvas-offset-y) * var(--canvas-scale)));
}

canvas {
  position: absolute;
  touch-action: none;
  background: transparent;
  width: 100%;
  height: 100%;
  z-index: 0;

  &#background-canvas {
    --base-dimension: 315px;
    background: #e0e0e3 url('images/45degree_fabric.webp');
    /* Set min to avoid moire effect  */
    background-size: calc(var(--base-dimension) * 2 * max(0.3, var(--canvas-scale))) auto;
    /* background-size: calc(var(--base-dimension) * 2 * var(--canvas-scale)) auto; */
    background-position: center;
    background-clip: content-box;
    border: 1px solid rgba(0, 0, 0, 0.3);
    box-shadow: 0 5px 20px 10px rgba(0, 0, 0, 0.2);
  }

  &.brush-canvas {
    z-index: 1;
  }
}

#contentWrapper, canvas {
  -webkit-user-select: none;
  user-select: none;
}

#toolbar {
  pointer-events: var(--toolbar-pointer-events);
  position: fixed;
  top: 10px;
  z-index: 10;
  padding: 15px;
  border-radius: 10px;
  box-shadow: 0 5px 10px 1px rgba(0, 0, 0, 0.5);
  max-width: calc(100% - 20px);
  color: black;
  display: flex;
  flex-direction: column;
  justify-content: safe center;
  align-items: center;
  gap: 10px;
  text-align: center;
  background-attachment: local;
  overflow: auto;
  max-height: calc(100% - 10px - 6.5rem);
  background-color: rgba(184, 209, 235);
  border: 1px solid transparent;

  @media not (prefers-contrast: more) {
    background-image: url('./images/so-white.png');
  }

  &[inert] {
    opacity: 0.5;
    pointer-events: none;
  }

  div {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    flex-wrap: wrap;
    max-width: 100%;
  }

  #toolbar-info {
    margin-bottom: 0.5rem;
  }

  .outer-menu {
    align-items: flex-start;
    flex-wrap: nowrap;

    &:not(:has(input[value=brush]:checked)) ~ .brush-menu,
    &:not(:has(input[value=fill]:checked)) ~ .fill-menu,
    &:not(:has(input[value=erase]:checked)) ~ .erase-menu {
      display: none;
    }
  }

  &:has(#show-guidelines>input:not(:checked)) ~ #contentWrapper .guide {
    display: none;
  }

  .menu {
    flex-wrap: wrap-reverse;
    flex: 1;
  }

  label:not(:has(input[type="range"])), button {
    border: 0 solid transparent;
    margin: 4px;
    background-color: rgb(0, 0, 0, 0.25);
    background-clip: padding-box;
    padding: 2px;
    font-size: 2rem;
    position: relative;
    border-radius: 8px;
  }

  &:has(#toggle-collapse :checked) {
    max-height: min(200px, 33vh);

    label:has([value="fill"]:checked) {
      border-color: var(--selected-fill-color) !important;
    }
  }

  label:not(:has(input[type="range"])) {
    cursor: pointer;

    &:not(#toggle-collapse):has(:checked) {
      background-color: black;
      margin: 0;
      border-width: 4px;
      border-color: white;
    }

    &:has([type="color"]) {
      margin: 0;
      border-width: 4px;
      border-color: var(--selected-fill-color);
    }

    @media (hover: hover) and (pointer: fine) {
      &:hover {
        background-color: black;
      }
    }

    input {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
  }

  label#toggle-collapse {
    &:not(:has(:checked)) > span > span:last-of-type {
      display: none;
    }

    &:has(:checked) > span > span:first-of-type {
      display: none;
    }
  }

  label:has(input[type="range"]) {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  label:has(input:disabled) {
    opacity: 0.5;
  }

  input:not([type="text"]) {
    &:not(:disabled) {
      cursor: pointer;
    }
  }

  button {
    @media (hover: hover) and (pointer: fine) {
      &:hover:not(:disabled) {
        background-color: black;
      }
    }

    &:disabled {
      opacity: 0.5;
      cursor: default;
    }
  }

  button, label {
    > span:first-child {
      filter: drop-shadow(0 0 1px black);
    }
  }
}

main {
  transition: opacity 0.5s;

  &[inert] {
    opacity: 0;
    transition: none;
  }

  &:has(#toggle-collapse input:checked) .collapsible {
    display: none;
  }
}

.hidden {
  display: none !important;
}

.relative {
  position: relative;
}

#settings-button, #portfolio-link {
  position: absolute;
  bottom: 1.25rem;
  background-color: rgb(0, 0, 0, 0.35);
  padding: 6px;
  border-radius: 99999px;
  border: 1px solid #f9b70f80;
  box-shadow: 0 0 4px 0 #f9b70f;
  display: inline-flex;
  justify-content: center;
  align-items: center;

  @media (hover: hover) and (pointer: fine) {
    &:hover {
      background: black;
      box-shadow: 0 0 6px 2px #f9b70f;
    }
  }

  > img, > span {
    border-radius: 99999px;
    pointer-events: none;
  }
}

#settings-button {
  left: 1.25rem;
  font-size: inherit;
  color: white;

  > span {
    filter: drop-shadow(0 0 1px black);
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 4px;
    padding: 0 6px 0 2px;

    @media (prefers-contrast: more) {
      background: black;
    }
  }
}

#portfolio-link {
  right: 1.25rem;

  > img {
    height: 4rem;
  }
}

dialog {
  margin: auto;
  position: fixed;
  inset: 0;
  z-index: 50;
  border: none;
  background: transparent;

  /* The modal-backdrop doesn't span the screen on iOS if the dialog doesn't */
  width: 100%;
  height: 100%;

  &::backdrop {
    background: transparent;
    backdrop-filter: blur(1px);
  }

  .modal-backdrop {
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
  }

  .modal-foreground {
    position: relative;
    box-shadow: 0 2px 10px 0 rgba(0, 0, 0, 0.5);
    background-color: #eee;
    border-radius: 8px;
    width: auto;
    max-width: min(100%, 500px);
    max-height: 100%;
    /* max-height: max-content; - Doesn't work in Firefox */
    overflow: auto;
    background-attachment: local;
    border: 1px solid transparent;

     @media not (prefers-contrast: more) {
      background-image: url('./images/white-waves.webp');
     }

    .modal-content {
      width: 100%;
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
      padding: 1rem;
      line-height: 1.5;

      section {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 0.25rem;

        &#shortcuts-settings {
          &.editing-shortcuts {
            #edit-shortcuts-button {
              display: none;
            }
          }

          &:not(.editing-shortcuts) {
            button:not(#edit-shortcuts-button) {
              display: none;
            }

            td:has(.shortcuts:empty) {
              &::before {
                content: '—' / 'No shortcuts set';
                opacity: 0.5;
                padding: 0 2px;
              }
            }
          }

          #shortcuts-title-wrapper {
            display: flex;
            align-items: baseline;
            gap: 16px;

            #shortcuts-title {
              flex-grow: 1;
            }
          }
        }
      }

      button {
        background: transparent;
        border: 1px solid rgba(0, 0, 0, 0.5);
        border-radius: 4px;
        line-height: 1;
        font-size: 1rem;
        padding: 3px 6px;

        @media (hover: hover) and (pointer: fine) {
          &:hover {
            background: #bbbbbb80;
          }
        }
      }

      h1, h2, h3 {
        margin: 0;
      }

      h1 {
        /* Ensure some space below the modal close button */
        min-height: 32px;
        font-weight: bold;
        font-size: 1.5rem;
        padding-right: 48px;

        > span {
          filter: drop-shadow(0 0 1px black);
        }
      }

      h2 {
        font-weight: 500;
        font-size: 1.25rem;

        button:first-of-type {
          margin-left: 10px;
        }
      }

      ul {
        padding-inline-start: 1.5rem;

        &:first-of-type {
          li {
            padding-top: 0.75rem;
          }

          &:not(:last-child) {
            margin-bottom: 0.75rem;
          }
        }

        &:not(:first-of-type) {
          li:not(:first-child) {
            padding-top: 0.5rem;
          }
        }
      }

      .glossary {
        margin: 0 0 8px;
        border-radius: 6px;
        padding: 2px 8px 6px;

        dt, dd {
          display: inline;
          margin: 0;
        }
      }

      table#shortcuts-table {
        border-collapse: collapse;

        tr {
          &:not(:first-child) {
            border-top: 1px solid #00000020;
          }
        }

        th, td {
          padding: 5px 0;
          vertical-align: baseline;

          &:not(:first-child) {
            padding-left: 20px;
          }
        }

        th {
          text-align: left;
        }

        td > .shortcuts {
          > div {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 1rem;
            border-bottom: 1px dashed #00000040;
            padding: 2px 0;

            #shortcuts-settings:not(.editing-shortcuts) &:last-child {
              border-bottom: none;
            }

            p {
              flex: 1;
            }
          }
        }

        .add-shortcut-container {
          margin: 2px 0;

          &:not(.adding-shortcut) {
            button.awaiting-input {
              display: none;
            }
          }

          &.adding-shortcut {
            button.add-shortcut {
              display: none;
            }
          }
        }
      }
    }
  }

  .close-button {
    background: transparent;
    border: 1px solid rgba(0, 0, 0, 0.5);
    border-radius: 8px;
    line-height: 1;
    font-size: 14px;
    position: absolute;
    top: 1rem;
    right: 1rem;
    z-index: 10;
    width: 32px;
    height: 32px;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0;
    font-family: sans-serif;

    @media (hover: hover) and (pointer: fine) {
      &:hover {
        background: #bbbbbb80;
      }
    }

    > span::before {
      content: '❌' / '';
      /* Make the emoji always appear black */
      filter: brightness(0);

      @media (prefers-contrast: more) {
        filter: brightness(0) invert(1);
      }
    }
  }
}
